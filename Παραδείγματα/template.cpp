/*
Το παρακάτω πρόγραμμα παρουσιάζει τη χρήση προτύπων (templates) στη γλώσσα προγραμματισμού C++. 
Το πρότυπο κλάσης Example ορίζει μια γενική κλάση που μπορεί να χρησιμοποιηθεί με οποιονδήποτε τύπο δεδομένων. 
Επιπλέον, η συνάρτηση add χρησιμοποιείται για την πρόσθεση δύο αριθμών, ανεξαρτήτως του τύπου τους.
*/

#include <iostream>
#include <string>

using namespace std;

// Η παρακάτω δήλωση ορίζει το πρότυπο κλάσης Example. Η κλάση αυτή έχει δύο μέλη δεδομένων, i και j, τα οποία είναι τύπου T.
template <class T>
class Example
{
public:
	T i;
	T j;
public:
	Example ();
	Example (T, T);
	Example<T> operator+ (const Example<T> &);
};

template <typename T>
Example<T>::Example ()
{

}

/* Η παρακάτω υλοποίηση ανήκει σε μια ειδική περίπτωση του κατασκευαστή της κλάσης Example για τον τύπο int. Αυτό επιτυγχάνεται με τη χρήση της σύνταξης template <> 
και της πλήρους ειδικοποίησης για τον τύπο int.

Η υλοποίηση αυτή αρχικοποιεί τα μέλη δεδομένων i και j της κλάσης Example<int> με την τιμή -10. Με άλλα λόγια, όταν δημιουργείται ένα αντικείμενο της κλάσης 
Example<int> χρησιμοποιώντας τον default κατασκευαστή, τα μέλη i και j θα αρχικοποιηθούν με την τιμή -10.

Αυτή η ειδική υλοποίηση κατασκευαστή επιτρέπει την προσαρμογή της αρχικής τιμής για έναν συγκεκριμένο τύπο δεδομένων, στην περίπτωση αυτή για τον τύπο int. */

template <>
Example<int>::Example ()
{
	i = j = -10;
}

// Η παρακάτω υλοποίηση ανήκει στον κατασκευαστή της κλάσης Example που δέχεται δύο ορίσματα τύπου T, τα οποία αναθέτει στα μέλη δεδομένων i και j της κλάσης.

template <typename T>
Example<T>::Example (T a, T b)
{
	i = a;
	j = b;
}

/* Η παρακάτω υλοποίηση ανήκει στον υπερφορτωμένο τελεστή + της κλάσης Example. Ο τελεστής + επιτρέπει την πρόσθεση δύο αντικειμένων της κλάσης Example και επιστρέφει
ένα νέο αντικείμενο της ίδιας κλάσης που περιέχει τα αποτελέσματα της πρόσθεσης.

Η υλοποίηση αυτή δημιουργεί ένα νέο αντικείμενο tmp της κλάσης Example<T> και αναθέτει στα μέλη i και j του αντικειμένου αυτού τα αντίστοιχα αθροίσματα των 
αντίστοιχων μελών i και j των δύο αντικειμένων (*this και x) που συμμετέχουν στην πρόσθεση. */

template <class T>
Example<T> Example<T>::operator+ (const Example<T> &x)
{
	Example<T> tmp;
	tmp.i = i + x.i;
	tmp.j = j + x.j;
	return tmp;
}

/* Η παραπάνω υλοποίηση ανήκει στη συνάρτηση add. Η συνάρτηση αυτή αναλαμβάνει να πραγματοποιήσει 
την πρόσθεση δύο τιμών τύπου P και να επιστρέψει το αποτέλεσμα.

Οι παράμετροι i και j της συνάρτησης είναι τύπου P, ο οποίος μπορεί να είναι οποιοσδήποτε τύπος δεδομένων. 
Η συνάρτηση απλώς εκτελεί την πράξη πρόσθεσης μεταξύ των δύο παραμέτρων και επιστρέφει το αποτέλεσμα. */

template <class P>
P add (P i, P j)
{
	return i + j;
}

int main (int argc, char **argv)
{
	//int x = add (10, 30.8);
	int x = add<int> (10, 30.8); // Κλήση της συνάρτησης add με τον τύπο int. Ο τύπος των παραμέτρων προσδιορίζεται με το <int>.
	double y = add<double> (10, 30.8); // Κλήση της συνάρτησης add με τον τύπο double. Ο τύπος των παραμέτρων προσδιορίζεται με το <double>.
	cout << x << endl;
	cout << y << endl;
	
	Example<int> m1 (5, 6); // Δημιουργία αντικειμένου της κλάσης Example με τον τύπο int.
	Example<int> m2 (10, 3.14); // Δημιουργία αντικειμένου της κλάσης Example με τον τύπο int.
	Example<int> r;
	r = m1 + m2; // Πραγματοποίηση της πράξης '+' μεταξύ δύο αντικειμένων της κλάσης Example με τον τύπο int.
	cout << r.i << " " << r.j <<endl ;
	
	Example<int> z1; // Δημιουργία αντικειμένου της κλάσης Example με τον τύπο int.
	Example<double> z2; // Δημιουργία αντικειμένου της κλάσης Example με τον τύπο double.
	
	cout << z1.i << " " << z1.j <<endl;
	cout << z2.i << " " << z2.j <<endl;
}
